#!/usr/bin/env escript
%% -*- erlang -*-
%%! -sname mswitch_control
%%
%% @author Jean-Lou Dupont
%%

%% Customize here
name() -> "mswitch".
%% ^^^^^^^^^^^^^^^^^

cmds() -> "[status|stop|busses]".

code_ok()               -> 0.
code_error()            -> 1.
code_daemon_found()     -> 2.
code_daemon_not_found() -> 3.
code_lib_not_found()    -> 4.
code_node_not_found()   -> 5.


err_lib()      -> name()++" library not found".
err_daemon()   -> "daemon not found".
err_node()     -> name()++" node not found".
err_response() -> "invalid response.".


msg_pid()    -> "daemon found, pid: ".
msg_usage()  -> "usage: "++name()++"_control [-q] "++cmds().
msg_kill()   -> "stop command sent".
msg_busses() -> "busses: ".

main(["-q", "stop"]) -> 	run(quiet,   stop);
main(["-q", "status"]) ->	run(quiet, 	 status);
main(["-q", "busses"]) ->	run(quiet, 	 busses);
main(["stop"]) ->			run(verbose, stop);
main(["status"]) ->			run(verbose, status);
main(["busses"]) ->			run(verbose, busses);
	
main([]) ->
	msg(verbose, code_ok(), msg_usage()),
	halt(code_ok());
	
main([_Cmd]) ->
	msg(verbose, code_ok(), msg_usage()),
	halt(code_error()).


run(Feedback, stop) ->
	add_cwd(),
	
	case getstatus() of
		daemon_not_found ->
			msg(Feedback, code_daemon_not_found(), err_daemon());
					
		{pid, Pid} ->
			os:cmd("kill -9 "++Pid),
			msg(Feedback, code_ok(), msg_kill());
			
		{error, lib_not_found} ->
			msg(Feedback, code_lib_not_found(), err_lib());
			
		{error, node_not_found} ->
			msg(Feedback, code_node_not_found(), err_node())		
	end;		
	
	
run(Feedback, busses) ->
	Busses=handle(Feedback, dorpc(busses, getbusses), busses),
	msg(Feedback, code_ok(), msg_busses(), Busses);
	
	
	
run(Feedback, status) ->

	%%for development
	add_cwd(),
	
	case getstatus() of
		daemon_not_found ->
			msg(Feedback, code_daemon_found(), err_daemon());
					
		{pid, Pid} ->
			msg(Feedback, code_daemon_found(), msg_pid(), Pid);
			
		{error, lib_not_found} ->
			msg(Feedback, code_lib_not_found(), err_lib());
			
		{error, node_not_found} ->
			msg(Feedback, code_node_not_found(), err_node())		
	
	end.
	

handle(Feedback, Code, Context) ->
	%%for development
	add_cwd(),
	
	case Code of
		daemon_not_found ->
			msg(Feedback, code_daemon_found(), err_daemon());
					
		{error, lib_not_found} ->
			msg(Feedback, code_lib_not_found(), err_lib());
			
		{error, node_not_found} ->
			msg(Feedback, code_node_not_found(), err_node());
	
		{Context, Message} ->
			Message;
			
		_ ->
			msg(Feedback, code_error(), err_response())
	end.



add_cwd() ->
	{ok,Cwd}=file:get_cwd(),
	Cp=Cwd++"/ebin",
	code:add_pathsa([Cp]).


getstatus() ->

	try
		Status=rpc(status),
		case Status of
			rpcerror ->
				daemon_not_found;
				
			{pid, Pid} ->
				{pid, Pid}	
		end
	catch
		error:undef ->
			{error, lib_not_found};
		
		_X:_Y ->
			{error, node_not_found}
	end.


msg(Feedback, Code, Msg) ->
	case Feedback of 
		verbose ->
			io:format(name()++"_control: ~s~n", [Msg]);
		_ ->
			ok
	end,	
	halt(Code).
	
msg(Feedback, Code, Msg1, Msg2) ->
	msg(Feedback, Code, Msg1++Msg2).


%%%%%%%%%%%%%%	
%% RPC related
%%%%%%%%%%%%%%

dorpc(Context, Command) ->
	try
		Reply=rpc(Command),
		case Reply of
			rpcerror ->
				daemon_not_found;
				
			{Context, Message} ->
				Message	
		end
	catch
		error:undef ->
			{error, lib_not_found};
		
		_X:_Y ->
			{error, node_not_found}
	end.

	
rpc(Command) ->
	case dorpc(Command) of
		rpcerror ->
			daemon_not_found;
	
		Response ->
			Response
	end.
	


dorpc(Message) ->
	Atom=erlang:list_to_atom(name()),
	Node=tools:make_node(Atom),
	
	case rpc:call(Node, Atom, daemon_api, [Message], 2000) of
		{badrpc, _Reason} ->
			rpcerror;
		
		Other ->
			Other
	end.
